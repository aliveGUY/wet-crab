import { Colors } from "../globals/colors.slint";
import { InterfaceState } from "../globals/state.slint";
import { IconButton } from "../common/icon-button.slint";

export component EntityListItem {
    in property <string> title;
    in property <string> entity-id;

    TouchArea {
        width: 100%;
        mouse-cursor: pointer;
        
        // Update hover state when has-hover changes
        property <string> current-hover: self.has-hover ? root.entity-id : "";
        Rectangle {
            border-radius: 6px;
            background: InterfaceState.selected-index == root.entity-id ? Colors.card-background-selected : Colors.card-background;
            border-width: 1px;
            border-color: parent.has-hover ? Colors.card-background-selected : Colors.card-background;
            HorizontalLayout {
                padding-top: 8px;
                padding-bottom: 8px;
                padding-left: 12px;
                padding-right: 12px;
                spacing: 8px;

                Text {
                    text: root.title;
                    color: InterfaceState.selected-index == root.entity-id ? Colors.text-color-selected : Colors.text-color;
                    font-size: 16px;
                    vertical-alignment: center;
                    horizontal-alignment: left;
                    overflow: TextOverflow.elide;
                }

                IconButton {
                    icon: @image-url("../icons/copy-icon.svg");
                    on-click => {
                        InterfaceState.copy-entity(entity-id)
                    }
                }

                IconButton {
                    icon: @image-url("../icons/delete-icon.svg");
                    on-click => {
                        InterfaceState.delete-entity(entity-id)
                    }
                }
            }
        }

        // Update global hover state when current-hover changes
        changed current-hover => {
            debug("Hover changed to: " + self.current-hover);
            InterfaceState.hovered-entity-id = self.current-hover;
        }

        clicked => {
            InterfaceState.selected-index = root.entity-id;
            InterfaceState.selected-title = root.title;
            InterfaceState.entity-selected(root.entity-id);
        }
    }
}
