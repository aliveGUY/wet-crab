import subprocess
import os
import signal
import sys

# ANSI escape codes (–±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Windows 10+ –∏ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤)
BOLD_WHITE = "\033[1;37m"
RESET = "\033[0m"

# –ü—É—Ç–∏ –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –∏ —Ü–µ–ª–µ–≤—ã–º —Ñ–∞–π–ª–∞–º
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
BUILD_DIR = os.path.abspath(os.path.join(SCRIPT_DIR, "..", "build", "windows"))
SRC_MAIN = os.path.join(BUILD_DIR, "main.windows.rs")
SRC_TOML = os.path.join(BUILD_DIR, "Cargo.windows.toml")
DEST_MAIN = os.path.join(SCRIPT_DIR, "..", "src", "main.rs")
DEST_TOML = os.path.join(SCRIPT_DIR, "..", "Cargo.toml")


def info(message):
    print(f"{BOLD_WHITE}[INFO]{RESET}: {message}")


def cleanup():
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        if os.path.exists(DEST_MAIN):
            os.remove(DEST_MAIN)
        if os.path.exists(DEST_TOML):
            os.remove(DEST_TOML)
        info("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        info(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã: {e}")


def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C"""
    info("üõë –°–±–æ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C).")
    cleanup()
    sys.exit(1)


def main():
    signal.signal(signal.SIGINT, signal_handler)

    info("üì¶ –°–±–æ—Ä–∫–∞ –ø–æ–¥ Windows...")

    try:
        os.makedirs(os.path.dirname(DEST_MAIN), exist_ok=True)

        # –ö–æ–ø–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
        info("üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤...")
        subprocess.run(["copy", SRC_MAIN, DEST_MAIN], shell=True, check=True)
        subprocess.run(["copy", SRC_TOML, DEST_TOML], shell=True, check=True)

        # –ö–æ–º–ø–∏–ª—è—Ü–∏—è
        info("üî® –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Å –ø–æ–º–æ—â—å—é cargo...")
        subprocess.run("cargo run", shell=True, check=True)

    except subprocess.CalledProcessError as e:
        info(f"‚ùå –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ {e.returncode})")
        cleanup()
        sys.exit(e.returncode)
    except Exception as e:
        info(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        cleanup()
        sys.exit(1)
    finally:
        cleanup()


if __name__ == "__main__":
    main()
